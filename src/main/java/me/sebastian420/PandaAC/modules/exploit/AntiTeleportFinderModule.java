package me.sebastian420.PandaAC.modules.exploit;

import me.sebastian420.PandaAC.events.OutgoingPacketListener;
import me.sebastian420.PandaAC.modules.PAModule;
import me.sebastian420.PandaAC.objects.MutableEntityPositionS2CPacket;
import me.sebastian420.PandaAC.objects.entity.PAPlayer;
import net.minecraft.network.listener.ClientPlayPacketListener;
import net.minecraft.network.packet.Packet;

import java.util.concurrent.ThreadLocalRandom;

public class AntiTeleportFinderModule extends PAModule implements OutgoingPacketListener {
    public AntiTeleportFinderModule() {
        super("antiteleport_finder");
        OutgoingPacketListener.EVENT.register(this);
    }

    @Override
    public void onOutgoingPacket(PAPlayer player, Packet<ClientPlayPacketListener> packet) {
        if (packet instanceof MutableEntityPositionS2CPacket) {
            MutableEntityPositionS2CPacket packet2 = (MutableEntityPositionS2CPacket) packet;
            int viewDistance = player.asMcPlayer().server.getPlayerManager().getViewDistance();
            int maxDistance = (int)(viewDistance * 16 * 1.5);
            if (Math.abs(player.getPacketX() - packet2.getX()) > maxDistance || Math.abs(player.getPacketZ() - packet2.getZ()) > maxDistance) {
                scrambleTeleportPacket(player, viewDistance, packet2);
            }
        }
    }

    private void scrambleTeleportPacket(PAPlayer player, int viewDistance, MutableEntityPositionS2CPacket packet) {
        ThreadLocalRandom random = ThreadLocalRandom.current();
        packet.setX(getFakeDouble(random, player.getPacketX(), (double) viewDistance + 16, 50000));
        packet.setY(random.nextDouble() * 256.0);
        packet.setZ(getFakeDouble(random, player.getPacketZ(), (double) viewDistance + 16, 50000));
    }

    private double getFakeDouble(ThreadLocalRandom random, double origin, double lowerdeltabound, double upperdeltabound) {
        double a = ((random.nextDouble() - 0.5) * 2 * (upperdeltabound - lowerdeltabound));
        return origin + (a > 0 ? a + lowerdeltabound : a - lowerdeltabound);
    }
}
